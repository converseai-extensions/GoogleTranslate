/**
 * @file translate.js
 * @author graeme+test001@converse.ai
 * @description Translate the given text to the given language
 * via Google Translate.
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status          = require('@converseai/plugins-sdk').Status;
const ModuleResponse  = require('@converseai/plugins-sdk').Payloads.ModuleResponse;
const path            = require('path');
const gcloud          = require('@google-cloud/translate')({
  keyFilename: path.join(__dirname, '../credentials.json')
});

module.exports = function translate (app, body) {
 /**
  * Registration parameters assigned to body.payload.registrationData
  * and Module parameters assigned to body.payload.moduleParam.
  * @example
  * var regOne = body.payload.registrationData.regOne;
  * var modOne = body.payload.moduleParam.modOne;
  */

  /** @type {String} text The text to translate  */
  var text = body.payload.moduleParam.text;

  /** @type {String} to Language to translate to.  */
  var to = body.payload.moduleParam.to;

  if (text && to) {
    gcloud.translate(text, to).then((results) => {
      const translation = results[0];

      console.log(`Text: ${text}`);
      console.log(`Translation: ${translation}`);
      /** @type {ModuleResponse} response The Converse AI response to respond with. */
      var response = new ModuleResponse();

      /*
      * Set an object on the response. This object will be returned to and stored
      * on the current conversation state. It is important to ensure the JSON
      * definition of this module has `hasReturn` set to true. E.g. if this module
      * is fired from a state called `myState` then the object can be accessed with
      * handlebars like:
      * {{states.myState.test00152003_google_translate.translate}}
      */
      response.setValue({text: text, translation: translation});

      /*
      * This will return a success status and response to the conversation.
      * It is important to always call this method when the module has finished
      * computing regardless of whether you wish to send a response or not. If not,
      * the conversation will hang indefinitely.
      */
      app.send(Status.SUCCESS, response);
    })
    .catch((err) => {
      console.error('ERROR:', err);
      app.send(Status.FAIL);
    });
  } else {
    console.log('No "text" or "to" provided.');
    app.send(Status.FAIL);
  }

};
